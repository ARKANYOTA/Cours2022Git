# Exercice4DM
# 1a)
La racine est "Lea"

Les valeurs possibles des feuilles sont dans ("Marc", "Theo", "Claire", "Louis", "Anne", "Marie", "Kevin", "Lea")

# 2a)

```python
def occurence(arb, nom):
    is_vainqueur = int(vainqueur(arb) == nom)  # Renvoie 1 si il est le vainqueur de arb sinon 0 
    if est_vide(arb):
        return is_vainqueur
    
    return occurence(gauche(arb, nom)) \
        + occurence(droite(arb, nom)) \
        + is_vainqueur
```

# 2b)

```python
def a_gagne(arb, nom):
    is_vainqueur = vainqueur(arb) # Renvoie True si il est le vainqueur de arb sinon False
    if is_vainqueur:
        return True
    if est_vide(arb):
        return False
    return a_gagne(gauche(arb, nom)) or a_gagne(droite(arb, nom))
```


# 1a)
La racine est "Lea"

Les valeurs possibles des feuilles sont dans ("Marc", "Theo", "Claire", "Louis", "Anne", "Marie", "Kevin", "Lea")

# 1c)

```python
def vainqueur(arb):
    return racine(arb)
```

# 1c)

```python
def finale(arb):
      # arbre_competition -> liste de 2 str
    return [vainqeur(gauche(arb)), vainqeur(droite(arb)), ]
```

# 2a)

```python
def occurence(arb, nom):
    is_vainqueur = int(vainqueur(arb) == nom)  # Renvoie 1 si il est le vainqueur de arb sinon 0
    if est_vide(arb):
        return is_vainqueur

    return occurence(gauche(arb, nom)) \
        + occurence(droite(arb, nom)) \
        + is_vainqueur
```

# 2b)

```python
def a_gagne(arb, nom):
    is_vainqueur = vainqueur(arb)==nom # Renvoie True si il est le vainqueur de arb sinon False
    if is_vainqueur:
        return True
    if est_vide(arb):
        return False
    return a_gagne(gauche(arb, nom)) or a_gagne(droite(arb, nom))
```

# 3a)
Sa aura des valeur erronée, car si un joueur ne fait que gagner, alors il apparait a la racine de l'arbre sans faire de match

```python
def nombre_matchs(arb, nom):
    """"""
    est_en_tete = int(vainqueur(arb) == nom)  # 1: Est en tête, 0: N'est pas en tête
    # Si il est en tete on enleve 1 dans les occurence
    return occurences(arb, nom) - est_en_tete
```

# 4)
```python
def liste_joueurs(arb):
    if est_vide(arb):
        return

---


# 1a)
La racine est "Lea"

Les valeurs possibles des feuilles sont dans ("Marc", "Theo", "Claire", "Louis", "Anne", "Marie", "Kevin", "Lea")

# 1b)

```python
def vainqueur(arb):
    return racine(arb)
```

# 1c)

```python
def finale(arb):
    return [vainqeur(gauche(arb)), vainqeur(droite(arb)), ]
```

# 2a)

```python
def occurence(arb, nom):
    is_vainqueur = int(vainqueur(arb) == nom)  # Renvoie 1 si il est le vainqueur de arb sinon 0
    if est_vide(arb):
        return 0

    return occurence(gauche(arb, nom)) \
        + occurence(droite(arb, nom)) \
        + is_vainqueur
```

# 2b)

```python
def a_gagne(arb, nom):
    is_vainqueur = vainqueur(arb)==nom # Renvoie True si il est le vainqueur de arb sinon False
    if is_vainqueur:
        return True
    if est_vide(arb):
        return False
    return a_gagne(gauche(arb, nom)) or a_gagne(droite(arb, nom))
```
```python
def a_gagne(arb, nom):
      # arbre_competition, nom: str -> bool

    if est_vide(arb):
      return False

    if vainqueur(arb)==nom:
        return True
    return a_gagne(gauche(arb, nom)) or a_gagne(droite(arb, nom))
```

Ou sinon 


```python
def a_gagne(arb, nom):
        # arbre_competition, nom: str -> bool

    return occurence(arb, nom) >= 2
```

# 3a)
Sa aura des valeur erronée, car si un joueur ne fait que gagner, alors il apparait a la racine de l'arbre sans faire de match

```python
def nombre_matchs(arb, nom):
    # arbre_competition, nom: str -> int

    est_en_tete = int(vainqueur(arb) == nom)  # 1: Est en tête, 0: N'est pas en tête
    # Si il est en tete on enleve 1 dans les occurence
    return occurences(arb, nom) - est_en_tete
```

# 4)
```py
def liste_joueurs(arb):
    if est_vide(arb):
        return []

    elif est_vide(gauche(arb)) and est_vide(droite(arb)):
        return [racine(arb)]
    else: return liste_joueurs(gauche(arb))+liste_joueurs(droit(arb))
```
